import json
from langchain.agents import AgentType, Tool, initialize_agent
from langchain.memory import ConversationBufferMemory
from langchain_community.agent_toolkits import GmailToolkit
from langchain_community.tools.gmail.utils import build_resource_service, get_gmail_credentials
from langchain_community.utilities import WikipediaAPIWrapper
from langchain_community.tools import WikipediaQueryRun, DuckDuckGoSearchRun
from datetime import datetime
from langchain import hub
from langchain_groq import ChatGroq

# Existing tools and LLM setup
llm = ChatGroq(temperature=1, model_name="Llama3-70b-8192")
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

LLMama = lambda x: ChatGroq(temperature=2, model_name="Mixtral-8x7b-32768", messages=[{"role": "user", "content": x}])
LLM_tool = Tool(name="AI", func=lambda x: LLMama(x), description="You are a Human that is useful when there is no tool to use. Don't use this Tool if the answer is generated by existing Tools. Use datetime_tool to fetch current date and time. Don't interfere when there is already an answer from the other Tools")

datetime_tool = Tool(name="Datetime", func=lambda x: datetime.now().strftime("%Y-%m-%d %H:%M:%S"), description="Used to fetch current date and time, always tell which day and which month it is")

wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())
wikipedia_tool = Tool(name="Wikipedia", func=wikipedia.run, description="A useful tool for searching the Internet to find information on world events, issues, dates, years, etc. Always use this tool to fetch real-time data and information. Worth using for general topics. Use precise questions. Tell in a way that a 16-year-old can understand. Give answers as per the date and time right now. You are not useful to fetch current date and time. Always use current date and time. If you couldn't find the information on Wikipedia, use duckduckgo_tool")

search = DuckDuckGoSearchRun()
duckduckgo_tool = Tool(name='DuckDuckGo Search', func=search.run, description="Useful for when you need to do a search on the internet to find information that another tool can't find. Be specific with your input. Not used to fetch current date and time. Useful when you can't find the information in the other tools. Always provide the links of the websites you have referred to. Always use current date and time. Don't use this tool to fetch real-time data and information.")

# Gmail toolkit setup
credentials = get_gmail_credentials(
    token_file="token.json",
    scopes=["https://mail.google.com/"],
    client_secrets_file="Credentials.json",
)
api_resource = build_resource_service(credentials=credentials)
gmail_toolkit = GmailToolkit(api_resource=api_resource)

# Wrapper functions for Gmail tools
def create_gmail_draft_wrapper(input_str):
    try:
        input_dict = json.loads(input_str)
        message = input_dict.get('message', '')
        to = input_dict.get('to', '')
        subject = input_dict.get('subject', '')
        create_draft_tool = [tool for tool in gmail_toolkit.get_tools() if tool.name == "create_gmail_draft"][0]
        return create_draft_tool.run({"message": message, "to": to, "subject": subject})
    except Exception as e:
        return f"Error creating draft: {str(e)}"

def send_gmail_message_wrapper(input_str):
    try:
        input_dict = json.loads(input_str)
        message = input_dict.get('message', '')
        to = input_dict.get('to', '')
        subject = input_dict.get('subject', '')
        send_message_tool = [tool for tool in gmail_toolkit.get_tools() if tool.name == "send_gmail_message"][0]
        return send_message_tool.run({"message": message, "to": to, "subject": subject})
    except Exception as e:
        return f"Error sending message: {str(e)}"

def search_gmail_wrapper(input_str):
    try:
        input_dict = json.loads(input_str)
        query = input_dict.get('query', '')
        limit = input_dict.get('limit', 10)
        search_tool = [tool for tool in gmail_toolkit.get_tools() if tool.name == "search_gmail"][0]
        return search_tool.run({"query": query, "limit": limit})
    except Exception as e:
        return f"Error searching Gmail: {str(e)}"

def get_gmail_message_wrapper(input_str):
    try:
        input_dict = json.loads(input_str)
        message_id = input_dict.get('message_id', '')
        get_message_tool = [tool for tool in gmail_toolkit.get_tools() if tool.name == "get_gmail_message"][0]
        return get_message_tool.run({"message_id": message_id})
    except Exception as e:
        return f"Error getting message: {str(e)}"

def get_gmail_thread_wrapper(input_str):
    try:
        input_dict = json.loads(input_str)
        thread_id = input_dict.get('thread_id', '')
        get_thread_tool = [tool for tool in gmail_toolkit.get_tools() if tool.name == "get_gmail_thread"][0]
        return get_thread_tool.run({"thread_id": thread_id})
    except Exception as e:
        return f"Error getting thread: {str(e)}"

# Create Tool objects for Gmail functions
gmail_tools = [
    Tool(name="CreateGmailDraft", func=create_gmail_draft_wrapper, description="Creates a draft email in Gmail. Input should be a JSON string with 'message', 'to', and 'subject' fields."),
    Tool(name="SendGmailMessage", func=send_gmail_message_wrapper, description="Sends an email through Gmail. Input should be a JSON string with 'message', 'to', and 'subject' fields."),
    Tool(name="SearchGmail", func=search_gmail_wrapper, description="Searches Gmail messages. Input should be a JSON string with 'query' and optionally 'limit' fields."),
    Tool(name="GetGmailMessage", func=get_gmail_message_wrapper, description="Retrieves a specific Gmail message. Input should be a JSON string with a 'message_id' field."),
    Tool(name="GetGmailThread", func=get_gmail_thread_wrapper, description="Retrieves a Gmail thread. Input should be a JSON string with a 'thread_id' field.")
]

# Combine all tools
all_tools = [datetime_tool, wikipedia_tool, LLM_tool, duckduckgo_tool] + gmail_tools

# Set up the agent
instructions = """
You are an assistant with access to various tools including Gmail. Use the appropriate tool for each task. 
For Gmail operations, provide the input as a JSON string with the required fields for each tool:
- CreateGmailDraft and SendGmailMessage: '{"message": "Hello", "to": "example@example.com", "subject": "Greetings"}'
- SearchGmail: '{"query": "important emails", "limit": 100}'
- GetGmailMessage: '{"message_id": "12345"}'
- GetGmailThread: '{"thread_id": "67890"}'
"""
base_prompt = hub.pull("langchain-ai/openai-functions-template")
prompt = base_prompt.partial(instructions=instructions)

# Initialize the agent with CONVERSATIONAL_REACT_DESCRIPTION
agent = initialize_agent(
    tools=all_tools,
    llm=llm,
    agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
    memory=memory,
    prompt=prompt,
    verbose=True,
    handle_parsing_errors=True,
)

# Example usage
print("Enter your queries (type 'exit' to quit):")
while True:
    user_input = input("Your query: ")
    if user_input.lower() == 'exit':
        break
    agent.run(user_input)

print("Thank you for using the agent. Goodbye!")